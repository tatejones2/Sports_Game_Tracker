name: Django Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: sports_tracker_test
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: |
          requirements/base.txt
          requirements/test.txt

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/test.txt

    - name: Run linting (pylint)
      run: |
        pylint apps/ config/ --exit-zero
      continue-on-error: true

    - name: Check code formatting (black)
      run: |
        black --check .
      continue-on-error: true

    - name: Check import sorting (isort)
      run: |
        isort --check-only .
      continue-on-error: true

    - name: Run security checks (bandit)
      run: |
        bandit -r apps/ config/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Run tests with coverage
      env:
        DJANGO_SETTINGS_MODULE: config.settings.test
        SECRET_KEY: test-secret-key-for-ci
        DB_NAME: sports_tracker_test
        DB_USER: testuser
        DB_PASSWORD: testpass
        DB_HOST: localhost
        DB_PORT: 5432
      run: |
        pytest --cov --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        verbose: true
      continue-on-error: true

    - name: Archive test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml
          bandit-report.json
        retention-days: 30
